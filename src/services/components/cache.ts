import type { LoadingCache, CacheStatus } from './types';

/**
 * Sistema de cach√© para componentes externos
 * Maneja el cach√© de promesas de carga y componentes cargados
 */
export class ComponentCache {
  private loadingCache: LoadingCache = {};
  private loadedComponents = new Set<string>();

  /**
   * Obtiene una promesa de carga del cach√©
   * @param componentId - ID del componente
   * @returns Promesa de carga o undefined
   */
  get(componentId: string): Promise<any> | undefined {
    return this.loadingCache[componentId];
  }

  /**
   * Almacena una promesa de carga en el cach√©
   * @param componentId - ID del componente
   * @param promise - Promesa a cachear
   */
  set(componentId: string, promise: Promise<any>): void {
    this.loadingCache[componentId] = promise;
    console.log(`üíæ Cached loading promise for component: ${componentId}`);
  }

  /**
   * Elimina una promesa del cach√© de carga
   * @param componentId - ID del componente a eliminar
   */
  delete(componentId: string): void {
    delete this.loadingCache[componentId];
    this.loadedComponents.delete(componentId);
    console.log(`üóëÔ∏è Removed from cache: ${componentId}`);
  }

  /**
   * Verifica si un componente ya est√° cargado
   * @param tagName - Nombre del tag del componente
   * @returns true si est√° cargado
   */
  isComponentLoaded(tagName: string): boolean {
    return this.loadedComponents.has(tagName);
  }

  /**
   * Marca un componente como cargado
   * @param tagName - Nombre del tag del componente
   */
  markComponentAsLoaded(tagName: string): void {
    this.loadedComponents.add(tagName);
    console.log(`üéØ Component marked as loaded: ${tagName}`);
  }

  /**
   * Verifica si un componente est√° en proceso de carga
   * @param componentId - ID del componente
   * @returns true si est√° cargando
   */
  isLoading(componentId: string): boolean {
    return componentId in this.loadingCache;
  }

  /**
   * Limpia todo el cach√©
   */
  clear(): void {
    this.loadingCache = {};
    this.loadedComponents.clear();
    console.log('üßπ Component cache cleared');
  }

  /**
   * Obtiene el tama√±o del cach√©
   * @returns N√∫mero de promesas en cach√©
   */
  size(): number {
    return Object.keys(this.loadingCache).length;
  }

  /**
   * Obtiene el estado actual del cach√©
   * @returns Estado del cach√©
   */
  getStatus(): CacheStatus {
    return {
      loadingPromises: Object.keys(this.loadingCache).length,
      loadedComponents: this.loadedComponents.size,
      registeredComponents: 0 // Se actualizar√° desde el registry
    };
  }

  /**
   * Obtiene la lista de componentes cargados
   * @returns Array de nombres de componentes cargados
   */
  getLoadedComponents(): string[] {
    return Array.from(this.loadedComponents);
  }

  /**
   * Verifica si un componente est√° en cach√©
   * @param componentId - ID del componente
   * @returns true si est√° en cach√©
   */
  has(componentId: string): boolean {
    return componentId in this.loadingCache;
  }

  /**
   * Obtiene todos los IDs de componentes en cach√©
   * @returns Array de IDs
   */
  getKeys(): string[] {
    return Object.keys(this.loadingCache);
  }
}
